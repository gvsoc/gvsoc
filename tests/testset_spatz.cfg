from plptest.testsuite import *
import re
import os

def add_test(testset, name, binary, cycle_ref=0, cycle_error_ref=0):
    test = testset.new_test(name)
    target = testset.get_target().get_name()
    gvsoc_target = testset.get_target().get_name()
    cwd = testset.get_path()
    work_dir = f'{cwd}/spatz-rtl/work/{name}'
    test.add_command(Shell('run', f'gvsoc --target {gvsoc_target} --work {work_dir}/{target} --binary {cwd}/{binary} run'))
    if cycle_ref != 0:
        test.add_command(Checker('run', check_output, cycle_ref, cycle_error_ref))
    return test

def check_output(test, output, cycle_ref, cycle_error_ref):
    log = ''

    match = re.search(r"The execution took (\d+) cycles\.", output)

    if not match:
        return (false, "Cycle count not found in log string\n")

    cycle_count = int(match.group(1))
    cycle_diff = abs(cycle_count - cycle_ref)
    cycle_error = cycle_diff / cycle_count * 100

    log += f'Found {cycle_count} cycles vs ref {cycle_ref}, error {cycle_error}% vs {cycle_error_ref}%\n'

    if cycle_error > cycle_error_ref:
        return(False, f'Too high error rate: {cycle_error} vs {cycle_error_ref} expected\n')

    return (True, log)

def benchmarks_build(testset):

    testset.set_name('benchmarks')

    tests = [
        ['dp-faxpy_M1024', 646, 3],
        ['dp-faxpy_M256', 231, 10],
        ['dp-fconv2d_M32_N32_K7', 7303, 10],
        ['dp-fconv2d_M64_N64_K7', 27675, 5],
        ['dp-fdotp_M128', 509, 100],
        ['dp-fdotp_M4096', 1563, 25],
        ['dp-fft_M128_N2', 0, 0],
        ['dp-fmatmul_M64_N64_K64', 33635, 10],
        ['hp-fmatmul_M128_N128_K128', 0, 0],
        ['hp-fmatmul_M64_N128_K64', 0, 0],
        ['hp-fmatmul_M64_N64_K64', 0, 0],
        ['sdotp-bp-fmatmul_M128_N128_K128', 0, 0],
        ['sdotp-bp-fmatmul_M128_N256_K128', 0, 0],
        ['sdotp-bp-fmatmul_M64_N128_K64', 0, 0],
        ['sdotp-bp-fmatmul_M64_N64_K64', 0, 0],
        ['sdotp-hp-fmatmul_M128_N128_K128', 0, 0],
        ['sdotp-hp-fmatmul_M64_N128_K64', 0, 0],
        ['sdotp-hp-fmatmul_M64_N64_K64', 0, 0],
        ['sp-fft_M256_N2', 0, 0],
        ['sp-fft_M512_N2', 0, 0],
        ['sp-fmatmul_M64_N128_K64', 0, 0],
        ['sp-fmatmul_M64_N64_K64', 0, 0],
        ['widening-bp-fmatmul_M128_N128_K128', 0, 0],
        ['widening-bp-fmatmul_M128_N256_K128', 0, 0],
        ['widening-bp-fmatmul_M64_N128_K64', 0, 0],
        ['widening-bp-fmatmul_M64_N64_K64', 0, 0],
        ['widening-hp-fmatmul_M128_N128_K128', 0, 0],
        ['widening-hp-fmatmul_M64_N128_K64', 0, 0],
        ['widening-hp-fmatmul_M64_N64_K64', 0, 0],
    ]

    skipped_tests = [
        'dp-fft_M128_N2',
        'hp-fmatmul_M128_N128_K128',
        'hp-fmatmul_M64_N128_K64',
        'hp-fmatmul_M64_N64_K64',
        'sdotp-bp-fmatmul_M128_N128_K128',
        'sdotp-bp-fmatmul_M128_N256_K128',
        'sdotp-bp-fmatmul_M64_N128_K64',
        'sdotp-bp-fmatmul_M64_N64_K64',
        'sdotp-hp-fmatmul_M128_N128_K128',
        'sdotp-hp-fmatmul_M64_N128_K64',
        'sdotp-hp-fmatmul_M64_N64_K64',
        'sp-fft_M256_N2',
        'sp-fft_M512_N2',
        'sp-fmatmul_M64_N128_K64',
        'sp-fmatmul_M64_N64_K64',
        'widening-bp-fmatmul_M128_N128_K128',
        'widening-bp-fmatmul_M128_N256_K128',
        'widening-bp-fmatmul_M64_N128_K64',
        'widening-bp-fmatmul_M64_N64_K64',
        'widening-hp-fmatmul_M128_N128_K128',
        'widening-hp-fmatmul_M64_N128_K64',
        'widening-hp-fmatmul_M64_N64_K64',
    ]

    for test_name, cycle_ref, cycle_error_ref in tests:
        test = add_test(testset, test_name, f'spatz-rtl/hw/system/spatz_cluster/sw/build/spatzBenchmarks/test-spatzBenchmarks-{test_name}', cycle_ref, cycle_error_ref)

        if test_name in skipped_tests:
            test.skip('Not yet supported')

def riscv_tests_build(testset):

    testset.set_name('riscv-tests')

    tests = [
        'vadd',
        'vand',
        'vdiv',
        'vdivu',
        'vfadd',
        'vfcvt',
        'vfmacc',
        'vfmadd',
        'vfmax',
        'vfmin',
        'vfmsac',
        'vfmsub',
        'vfmul',
        'vfmv',
        'vfncvt',
        'vfnmacc',
        'vfnmadd',
        'vfnmsac',
        'vfnmsub',
        'vfredmax',
        'vfredmin',
        'vfredosum',
        'vfredusum',
        'vfrsub',
        'vfsgnj',
        'vfsgnjn',
        'vfsgnjx',
        'vfsub',
        'vfwadd',
        'vfwmacc',
        'vfwmsac',
        'vfwmul',
        'vfwnmsac',
        'vfwsub',
        'vmacc',
        'vmadd',
        'vmax',
        'vmaxu',
        'vmin',
        'vminu',
        'vmul',
        'vmulh',
        'vmulhsu',
        'vmulhu',
        'vmv',
        'vnmsac',
        'vnmsub',
        'vor',
        'vredand',
        'vredmax',
        'vredmaxu',
        'vredmin',
        'vredminu',
        'vredor',
        'vredsum',
        'vredxor',
        'vrem',
        'vremu',
        'vrsub',
        'vsetvli',
        'vslide1down',
        'vslide1up',
        'vslidedown',
        'vslideup',
        'vsll',
        'vsra',
        'vsrl',
        'vsub',
        'vwadd',
        'vwaddu',
        'vwmacc',
        'vwmaccsu',
        'vwmaccu',
        'vwmaccus',
        'vwmul',
        'vwmulsu',
        'vwmulu',
        'vwsub',
        'vwsubu',
        'vxor'
    ]

    skipped_tests = [
        'vadd',
        'vand',
        'vdiv',
        'vdivu',
        'vfwadd',
        'vfwmacc',
        'vfwmsac',
        'vfwmul',
        'vfwnmsac',
        'vfwsub',
        'vmacc',
        'vmadd',
        'vmax',
        'vmaxu',
        'vmin',
        'vminu',
        'vmul',
        'vmulh',
        'vmulhsu',
        'vmulhu',
        'vmv',
        'vnmsac',
        'vnmsub',
        'vor',
        'vredand',
        'vredmax',
        'vredmaxu',
        'vredmin',
        'vredminu',
        'vredor',
        'vredsum',
        'vredxor',
        'vrem',
        'vremu',
        'vrsub',
        'vsetvli',
        'vsll',
        'vsra',
        'vsrl',
        'vsub',
        'vwadd',
        'vwaddu',
        'vwmacc',
        'vwmaccsu',
        'vwmaccu',
        'vwmaccus',
        'vwmul',
        'vwmulsu',
        'vwmulu',
        'vwsub',
        'vwsubu',
        'vxor'
    ]

    for test_name in tests:
        test = add_test(testset, test_name, f'spatz-rtl/hw/system/spatz_cluster/sw/build/riscvTests/test-riscvTests-{test_name}')

        if test_name in skipped_tests:
            test.skip('Not yet supported')


def testset_build(testset):

    testset.set_name('spatz')

    testset.add_target('spatz')

    testset.add_testset(callback=riscv_tests_build)

    testset.add_testset(callback=benchmarks_build)
