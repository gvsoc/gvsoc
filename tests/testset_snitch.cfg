from plptest.testsuite import *
import re
import os

def add_test(testset, name, binary, verify=None, retval=0):
    test = testset.new_test(name)
    target = testset.get_target().get_name()
    gvsoc_target = testset.get_target().get_property('target')
    cwd = testset.get_path()
    work_dir = f'{cwd}/snitch/work/{name}'
    if verify is not None:
        test.add_command(Shell('run',
            f'GVSOC_WORK_DIR={work_dir}/{target} GVSOC_TARGET={gvsoc_target} {cwd}/snitch/{verify} {cwd}/snitch/target/snitch_cluster/util/../bin/snitch_cluster.gvsoc {cwd}/{binary} --simulator=gvsoc',
            retval=retval))
    else:
        test.add_command(Shell('run', f'gvsoc --target {gvsoc_target} --work {work_dir}/{target} --binary {cwd}/{binary} run',
            retval=retval))
    return test

def tests_build(testset):

    alias = add_test(testset, 'alias', 'snitch/target/snitch_cluster/sw/tests/build/alias.elf').skip('Not yet supported')
    atomics = add_test(testset, 'atomics', 'snitch/target/snitch_cluster/sw/tests/build/atomics.elf')
    barrier = add_test(testset, 'barrier', 'snitch/target/snitch_cluster/sw/tests/build/barrier.elf')
    data_mover = add_test(testset, 'data_mover', 'snitch/target/snitch_cluster/sw/tests/build/data_mover.elf').skip('Not yet supported')
    dma_empty_transfer = add_test(testset, 'dma_empty_transfer', 'snitch/target/snitch_cluster/sw/tests/build/dma_empty_transfer.elf')
    dma_simple = add_test(testset, 'dma_simple', 'snitch/target/snitch_cluster/sw/tests/build/dma_simple.elf')
    event_unit = add_test(testset, 'event_unit', 'snitch/target/snitch_cluster/sw/tests/build/event_unit.elf').skip('Not yet supported')
    fence_i = add_test(testset, 'fence_i', 'snitch/target/snitch_cluster/sw/tests/build/fence_i.elf')
    fp8_comparison_scalar = add_test(testset, 'fp8_comparison_scalar', 'snitch/target/snitch_cluster/sw/tests/build/fp8_comparison_scalar.elf')
    fp8_comparison_vector = add_test(testset, 'fp8_comparison_vector', 'snitch/target/snitch_cluster/sw/tests/build/fp8_comparison_vector.elf')
    fp8_computation_scalar = add_test(testset, 'fp8_computation_scalar', 'snitch/target/snitch_cluster/sw/tests/build/fp8_computation_scalar.elf')
    fp8_computation_vector = add_test(testset, 'fp8_computation_vector', 'snitch/target/snitch_cluster/sw/tests/build/fp8_computation_vector.elf')
    fp8alt_comparison_scalar = add_test(testset, 'fp8alt_comparison_scalar', 'snitch/target/snitch_cluster/sw/tests/build/fp8alt_comparison_scalar.elf')
    fp8alt_comparison_vector = add_test(testset, 'fp8alt_comparison_vector', 'snitch/target/snitch_cluster/sw/tests/build/fp8alt_comparison_vector.elf')
    fp8alt_computation_scalar = add_test(testset, 'fp8alt_computation_scalar', 'snitch/target/snitch_cluster/sw/tests/build/fp8alt_computation_scalar.elf')
    fp8alt_computation_vector = add_test(testset, 'fp8alt_computation_vector', 'snitch/target/snitch_cluster/sw/tests/build/fp8alt_computation_vector.elf')
    fp16_comparison_scalar = add_test(testset, 'fp16_comparison_scalar', 'snitch/target/snitch_cluster/sw/tests/build/fp16_comparison_scalar.elf')
    fp16_comparison_vector = add_test(testset, 'fp16_comparison_vector', 'snitch/target/snitch_cluster/sw/tests/build/fp16_comparison_vector.elf')
    fp16_computation_scalar = add_test(testset, 'fp16_computation_scalar', 'snitch/target/snitch_cluster/sw/tests/build/fp16_computation_scalar.elf')
    fp16_computation_vector = add_test(testset, 'fp16_computation_vector', 'snitch/target/snitch_cluster/sw/tests/build/fp16_computation_vector.elf')
    fp16alt_comparison_scalar = add_test(testset, 'fp16alt_comparison_scalar', 'snitch/target/snitch_cluster/sw/tests/build/fp16alt_comparison_scalar.elf')
    fp16alt_comparison_vector = add_test(testset, 'fp16alt_comparison_vector', 'snitch/target/snitch_cluster/sw/tests/build/fp16alt_comparison_vector.elf')
    fp16alt_computation_scalar = add_test(testset, 'fp16alt_computation_scalar', 'snitch/target/snitch_cluster/sw/tests/build/fp16alt_computation_scalar.elf')
    fp16alt_computation_vector = add_test(testset, 'fp16alt_computation_vector', 'snitch/target/snitch_cluster/sw/tests/build/fp16alt_computation_vector.elf')
    fp32_comparison_scalar = add_test(testset, 'fp32_comparison_scalar', 'snitch/target/snitch_cluster/sw/tests/build/fp32_comparison_scalar.elf')
    fp32_comparison_vector = add_test(testset, 'fp32_comparison_vector', 'snitch/target/snitch_cluster/sw/tests/build/fp32_comparison_vector.elf')
    fp32_computation_scalar = add_test(testset, 'fp32_computation_scalar', 'snitch/target/snitch_cluster/sw/tests/build/fp32_computation_scalar.elf')
    fp32_computation_vector = add_test(testset, 'fp32_computation_vector', 'snitch/target/snitch_cluster/sw/tests/build/fp32_computation_vector.elf')
    fp32_conversions_scalar = add_test(testset, 'fp32_conversions_scalar', 'snitch/target/snitch_cluster/sw/tests/build/fp32_conversions_scalar.elf')
    interrupt_local = add_test(testset, 'interrupt_local', 'snitch/target/snitch_cluster/sw/tests/build/interrupt_local.elf').skip('Not yet supported')
    multi_cluster = add_test(testset, 'multi_cluster', 'snitch/target/snitch_cluster/sw/tests/build/multi_cluster.elf')
    openmp_parallel = add_test(testset, 'openmp_parallel', 'snitch/target/snitch_cluster/sw/tests/build/openmp_parallel.elf').skip('Not yet supported')
    openmp_for_static_schedule = add_test(testset, 'openmp_for_static_schedule', 'snitch/target/snitch_cluster/sw/tests/build/openmp_for_static_schedule.elf').skip('Not yet supported')
    openmp_double_buffering = add_test(testset, 'openmp_double_buffering', 'snitch/target/snitch_cluster/sw/tests/build/openmp_double_buffering.elf').skip('Not yet supported')
    perf_cnt = add_test(testset, 'perf_cnt', 'snitch/target/snitch_cluster/sw/tests/build/perf_cnt.elf').skip('Not yet supported')
    printf_simple = add_test(testset, 'printf_simple', 'snitch/target/snitch_cluster/sw/tests/build/printf_simple.elf')
    printf_fmtint = add_test(testset, 'printf_fmtint', 'snitch/target/snitch_cluster/sw/tests/build/printf_fmtint.elf')
    simple = add_test(testset, 'simple', 'snitch/target/snitch_cluster/sw/tests/build/simple.elf')
    tls = add_test(testset, 'tls', 'snitch/target/snitch_cluster/sw/tests/build/tls.elf')
    varargs_1 = add_test(testset, 'varargs_1', 'snitch/target/snitch_cluster/sw/tests/build/varargs_1.elf')
    varargs_2 = add_test(testset, 'varargs_2', 'snitch/target/snitch_cluster/sw/tests/build/varargs_2.elf')
    zero_mem = add_test(testset, 'zero_mem', 'snitch/target/snitch_cluster/sw/tests/build/zero_mem.elf')
    non_null_exitcode = add_test(testset, 'non_null_exitcode', 'snitch/target/snitch_cluster/sw/tests/build/non_null_exitcode.elf', retval=1)
    caq = add_test(testset, 'caq', 'snitch/target/snitch_cluster/sw/tests/build/caq.elf').skip('Not yet supported')
    caq_frep = add_test(testset, 'caq_frep', 'snitch/target/snitch_cluster/sw/tests/build/caq_frep.elf').skip('Not yet supported')
    axpy = add_test(testset, 'axpy', 'snitch/target/snitch_cluster/sw/apps/blas/axpy/build/axpy.elf', verify='sw/blas/axpy/scripts/verify.py')
    gemm = add_test(testset, 'gemm', 'snitch/target/snitch_cluster/sw/apps/blas/gemm/build/gemm.elf', verify='sw/blas/gemm/scripts/verify.py')
    dot = add_test(testset, 'dot', 'snitch/target/snitch_cluster/sw/apps/blas/dot/build/dot.elf', verify='sw/blas/dot/scripts/verify.py')
    syrk = add_test(testset, 'syrk', 'snitch/target/snitch_cluster/sw/apps/blas/syrk/build/syrk.elf', verify='sw/blas/syrk/scripts/verify.py')
    batchnorm = add_test(testset, 'batchnorm', 'snitch/target/snitch_cluster/sw/apps/dnn/batchnorm/build/batchnorm.elf')
    maxpool = add_test(testset, 'maxpool', 'snitch/target/snitch_cluster/sw/apps/dnn/maxpool/build/maxpool.elf')
    concat = add_test(testset, 'concat', 'snitch/target/snitch_cluster/sw/apps/dnn/concat/build/concat.elf', verify='sw/dnn/concat/scripts/verify.py')
    fused_concat_linear = add_test(testset, 'fused_concat_linear', 'snitch/target/snitch_cluster/sw/apps/dnn/fused_concat_linear/build/fused_concat_linear.elf', verify='sw/dnn/fused_concat_linear/scripts/verify.py')
    transpose = add_test(testset, 'transpose', 'snitch/target/snitch_cluster/sw/apps/dnn/transpose/build/transpose.elf', verify='sw/dnn/transpose/scripts/verify.py').skip('Not yet supported')
    pi_estimation = add_test(testset, 'pi_estimation', 'snitch/target/snitch_cluster/sw/apps/montecarlo/pi_estimation/build/pi_estimation.elf')
    atax = add_test(testset, 'atax', 'snitch/target/snitch_cluster/sw/apps/atax/build/atax.elf', verify='sw/apps/atax/scripts/verify.py')
    covariance = add_test(testset, 'covariance', 'snitch/target/snitch_cluster/sw/apps/covariance/build/covariance.elf').skip('Not yet supported')
    doitgen = add_test(testset, 'doitgen', 'snitch/target/snitch_cluster/sw/apps/doitgen/build/doitgen.elf', verify='sw/apps/doitgen/scripts/verify.py')
    gemv = add_test(testset, 'gemv', 'snitch/target/snitch_cluster/sw/apps/blas/gemv/build/gemv.elf', verify='sw/blas/gemv/scripts/verify.py')

    target = testset.get_target().get_name()

    if target == 'snitch_cluster_single':
        gemv.skip('To be fixed')
        gemm.skip('To be fixed')
        axpy.skip('To be fixed')
        dot.skip('To be fixed')
        syrk.skip('To be fixed')
        concat.skip('To be fixed')
        fused_concat_linear.skip('To be fixed')
        atax.skip('To be fixed')
        doitgen.skip('To be fixed')


def testset_build(testset):

    testset.set_name('snitch')

    testset.add_target('snitch',    '''{
        "properties": { "target": "snitch" }
    }''')

    testset.add_target('snitch:core_type=fast',
    '''{
        "properties": { "target": "snitch:core_type=fast" }
    }''')

    testset.add_target('snitch_cluster_single',
    '''{
        "properties": { "target": "pulp.snitch.snitch_cluster_single" }
    }''')

    testset.add_testset(callback=tests_build)
