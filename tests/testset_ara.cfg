from plptest.testsuite import *
import re
import os

def add_test(testset, name, binary, cycle_ref=0, cycle_error_ref=0, compile=None):
    test = testset.new_test(name)
    target = testset.get_target().get_name()
    gvsoc_target = testset.get_target().get_name()
    cwd = testset.get_path()
    work_dir = f'{cwd}/ara-rtl/work/{name}'
    if compile is not None:
        test.add_command(Shell('build', f'cd ara-rtl/apps && make {compile} LLVM_INSTALL_DIR=${{ARA_LLVM}}'))
    test.add_command(Shell('run', f'gvsoc --target {gvsoc_target} --work {work_dir}/{target} --binary {cwd}/{binary} run'))
    if cycle_ref != 0:
        test.add_command(Checker('run', check_output, cycle_ref, cycle_error_ref))
    return test

def check_output(test, output, cycle_ref, cycle_error_ref):
    log = ''

    match = re.search(r"The execution took (\d+) cycles\.", output)

    if not match:
        return (false, "Cycle count not found in log string\n")

    cycle_count = int(match.group(1))
    cycle_diff = abs(cycle_count - cycle_ref)
    cycle_error = cycle_diff / cycle_count * 100

    log += f'Found {cycle_count} cycles vs ref {cycle_ref}, error {cycle_error}% vs {cycle_error_ref}%\n'

    if cycle_error > cycle_error_ref:
        return(False, f'Too high error rate: {cycle_error} vs {cycle_error_ref} expected\n')

    return (True, log)

def benchmarks_build(testset):

    testset.set_name('benchmarks')

    tests = [
        ['benchmarks', 0, 0],
        ['conjugate_gradient', 0, 0],
        ['cos', 0, 0],
        ['dotproduct', 0, 0],
        ['dropout', 0, 0],
        ['dtype-conv3d', 0, 0],
        ['dtype-matmul', 0, 0],
        ['dwt', 0, 0],
        ['exp', 0, 0],
        ['fconv2d', 157000, 2],
        ['fconv3d', 0, 0],
        ['fdotproduct', 0, 0],
        ['fft', 0, 0],
        ['fmatmul', 0, 0],
        ['gemv', 0, 0],
        ['hello_world', 0, 0],
        ['iconv2d', 0, 0],
        ['imatmul', 0, 0],
        ['jacobi2d', 0, 0],
        ['lavamd', 0, 0],
        ['log', 0, 0],
        ['pathfinder', 0, 0],
        ['roi_align', 0, 0],
        ['softmax', 0, 0],
        ['spmv', 0, 0],
        ['vfredsum', 0, 0],
    ]

    skipped_tests = [
        'benchmarks',
        'conjugate_gradient',
        'cos',
        'dotproduct',
        'dropout',
        'dtype-conv3d',
        'dtype-matmul',
        'dwt',
        'exp',
        'fconv3d',
        'fdotproduct',
        'fft',
        'fmatmul',
        'gemv',
        'hello_world',
        'iconv2d',
        'imatmul',
        'jacobi2d',
        'lavamd',
        'log',
        'pathfinder',
        'roi_align',
        'softmax',
        'spmv',
        'vfredsum',
    ]

    for test_name, cycle_ref, cycle_error_ref in tests:
        test = add_test(testset, test_name, f'ara-rtl/apps/bin/{test_name}', cycle_ref, cycle_error_ref, compile=f'bin/{test_name}')

        if test_name in skipped_tests:
            test.skip('Not yet supported')

def riscv_tests_build(testset):

    testset.set_name('riscv-tests')

    tests = [
        'vaadd',
        'vaadd',
        'vsadd',
        'vsaddu',
        'vsmul',
        'vssra',
        'vssrl',
        'vnclip',
        'vnclipu',
        'vadd',
        'vsub',
        'vrsub',
        'vwaddu',
        'vwsubu',
        'vwadd',
        'vwsub',
        'vsext',
        'vzext',
        'vadc',
        'vmadc',
        'vsbc',
        'vmsbc',
        'vand',
        'vor',
        'vxor',
        'vsll',
        'vsrl',
        'vsra',
        'vnsrl',
        'vnsra',
        'vmseq',
        'vmsne',
        'vmsltu',
        'vmslt',
        'vmsleu',
        'vmsle',
        'vmsgtu',
        'vmsgt',
        'vminu',
        'vmin',
        'vmaxu',
        'vmax',
        'vmul',
        'vmulh',
        'vmulhu',
        'vmulhsu',
        'vdivu',
        'vdiv',
        'vremu',
        'vrem',
        'vwmul',
        'vwmulu',
        'vwmulsu',
        'vmacc',
        'vnmsac',
        'vmadd',
        'vnmsub',
        'vwmaccu',
        'vwmacc',
        'vwmaccsu',
        'vwmaccus',
        'vmerge',
        'vmv',
        'vmvxs',
        'vmvsx',
        'vfmvfs',
        'vfmvsf',
        'vmvnrr',
        'vredsum',
        'vredmaxu',
        'vredmax',
        'vredminu',
        'vredmin',
        'vredand',
        'vredor',
        'vredxor',
        'vwredsumu',
        'vwredsum',
        'vfadd',
        'vfsub',
        'vfrsub',
        'vfwadd',
        'vfwsub',
        'vfmul',
        'vfdiv',
        'vfrdiv',
        'vfwmul',
        'vfmacc',
        'vfnmacc',
        'vfmsac',
        'vfnmsac',
        'vfmadd',
        'vfnmadd',
        'vfmsub',
        'vfnmsub',
        'vfwmacc',
        'vfwnmacc',
        'vfwmsac',
        'vfwnmsac',
        'vfsqrt',
        'vfmin',
        'vfmax',
        'vfredusum',
        'vfredosum',
        'vfredmin',
        'vfredmax',
        'vfwredusum',
        'vfwredosum',
        'vfclass',
        'vfsgnj',
        'vfsgnjn',
        'vfsgnjx',
        'vfmerge',
        'vfmv',
        'vmfeq',
        'vmfne',
        'vmflt',
        'vmfle',
        'vmfgt',
        'vmfge',
        'vfcvt',
        'vfwcvt',
        'vfncvt',
        'vmand',
        'vmnand',
        'vmandnot',
        'vmor',
        'vmnor',
        'vmornot',
        'vmxor',
        'vmxnor',
        'vslideup',
        'vslidedown',
        'vslide1up',
        'vfslide1up',
        'vslide1down',
        'vfslide1down',
        'vl',
        'vlff',
        'vlseg',
        'vlsseg',
        'vluxseg',
        'vl1r',
        'vle1',
        'vls',
        'vluxei',
        'vs',
        'vsseg',
        'vssseg',
        'vsuxseg',
        'vs1r',
        'vse1',
        'vss',
        'vsuxei',
        'vsetivl',
        'vsetvl',
        'vsetv',
        'vmsbf',
        'vmsof',
        'vmsif',
        'viota',
        'vid',
        'vcpop',
        'vfirst',
        'vle8',
        'vse8',
        'vle16',
        'vse16',
        'vle32',
        'vse32',
        'vle64',
        'vse64',
        'vle_vse_hazards',
        'vfrec7',
        'vfrsqrt7',
        'vrgather',
        'vcompress',
    ]

    skipped_tests = [        'vaadd',
        'vaadd',
        'vsadd',
        'vsaddu',
        'vsmul',
        'vssra',
        'vssrl',
        'vnclip',
        'vnclipu',
        'vadd',
        'vsub',
        'vrsub',
        'vwaddu',
        'vwsubu',
        'vwadd',
        'vwsub',
        'vsext',
        'vzext',
        'vadc',
        'vmadc',
        'vsbc',
        'vmsbc',
        'vand',
        'vor',
        'vxor',
        'vsll',
        'vsrl',
        'vsra',
        'vnsrl',
        'vnsra',
        'vmseq',
        'vmsne',
        'vmsltu',
        'vmslt',
        'vmsleu',
        'vmsle',
        'vmsgtu',
        'vmsgt',
        'vminu',
        'vmin',
        'vmaxu',
        'vmax',
        'vmul',
        'vmulh',
        'vmulhu',
        'vmulhsu',
        'vdivu',
        'vdiv',
        'vremu',
        'vrem',
        'vwmul',
        'vwmulu',
        'vwmulsu',
        'vmacc',
        'vnmsac',
        'vmadd',
        'vnmsub',
        'vwmaccu',
        'vwmacc',
        'vwmaccsu',
        'vwmaccus',
        'vmerge',
        'vmv',
        'vmvxs',
        'vmvsx',
        'vfmvfs',
        'vfmvsf',
        'vmvnrr',
        'vredsum',
        'vredmaxu',
        'vredmax',
        'vredminu',
        'vredmin',
        'vredand',
        'vredor',
        'vredxor',
        'vwredsumu',
        'vwredsum',
        'vfadd',
        'vfsub',
        'vfrsub',
        'vfwadd',
        'vfwsub',
        'vfmul',
        'vfdiv',
        'vfrdiv',
        'vfwmul',
        'vfmacc',
        'vfnmacc',
        'vfmsac',
        'vfnmsac',
        'vfmadd',
        'vfnmadd',
        'vfmsub',
        'vfnmsub',
        'vfwmacc',
        'vfwnmacc',
        'vfwmsac',
        'vfwnmsac',
        'vfsqrt',
        'vfmin',
        'vfmax',
        'vfredusum',
        'vfredosum',
        'vfredmin',
        'vfredmax',
        'vfwredusum',
        'vfwredosum',
        'vfclass',
        'vfsgnj',
        'vfsgnjn',
        'vfsgnjx',
        'vfmerge',
        'vfmv',
        'vmfeq',
        'vmfne',
        'vmflt',
        'vmfle',
        'vmfgt',
        'vmfge',
        'vfcvt',
        'vfwcvt',
        'vfncvt',
        'vmand',
        'vmnand',
        'vmandnot',
        'vmor',
        'vmnor',
        'vmornot',
        'vmxor',
        'vmxnor',
        'vslideup',
        'vslidedown',
        'vslide1up',
        'vfslide1up',
        'vslide1down',
        'vfslide1down',
        'vl',
        'vlff',
        'vlseg',
        'vlsseg',
        'vluxseg',
        'vl1r',
        'vle1',
        'vls',
        'vluxei',
        'vs',
        'vsseg',
        'vssseg',
        'vsuxseg',
        'vs1r',
        'vse1',
        'vss',
        'vsuxei',
        'vsetivl',
        'vsetvl',
        'vsetv',
        'vmsbf',
        'vmsof',
        'vmsif',
        'viota',
        'vid',
        'vcpop',
        'vfirst',
        'vle8',
        'vse8',
        'vle16',
        'vse16',
        'vle32',
        'vse32',
        'vle64',
        'vse64',
        'vle_vse_hazards',
        'vfrec7',
        'vfrsqrt7',
        'vrgather',
        'vcompress',
    ]

    for test_name in tests:
        test = add_test(testset, test_name, f'ara-rtl/apps/bin/v64uv-ara-{test_name}')

        if test_name in skipped_tests:
            test.skip('Not yet supported')


def testset_build(testset):

    testset.set_name('ara')

    testset.add_target('ara')

    testset.add_testset(callback=riscv_tests_build)

    testset.add_testset(callback=benchmarks_build)
