import os
from plptest.testsuite import *


def rv64_tests_build(testset):
    cwd = testset.get_path()

    test = testset.new_test('hello')
    test.add_command(Shell('run', f'gvsoc --target=rv64 --work rv64 --binary {cwd}/pk --arg {cwd}/hello run'))

    test = testset.new_test('linux')
    test.add_command(Shell('run', './launch_linux.py'))

def rv64_testset_build(testset):
    testset.set_name('rv64')
    testset.add_target('rv64')
    testset.add_testset(callback=rv64_tests_build)


def pulp_open_tests_build(testset):
    cwd = testset.get_path()
    test = testset.new_test('hello')
    test.add_command(Shell('run', f'gvsoc --target=pulp-open --work pulp-open --binary {cwd}/pulp-open/hello image flash run'))

def pulp_open_testset_build(testset):
    testset.set_name('pulp-open')
    testset.add_target('pulp-open')
    testset.add_testset(callback=pulp_open_tests_build)


def spatz_tests_build(testset):
    cwd = testset.get_path()
    test = testset.new_test('fdotp')
    test.add_command(Shell('run', f'gvsoc --target=pulp.spatz.spatz --work pulp.spatz.spatz --binary {cwd}/test-spatzBenchmarks-dp-fdotp_M128 run'))

def spatz_testset_build(testset):
    testset.set_name('spatz')
    testset.add_target('spatz')
    testset.add_testset(callback=spatz_tests_build)


def snitch_spatz_tests_build(testset):
    cwd = testset.get_path()
    test = testset.new_test('snitch_spatz')
    test.add_command(Shell('run', f'gvsoc --target=snitch_spatz --work snitch_spatz --binary {cwd}/rv64uv-p-vfadd run'))

def snitch_spatz_testset_build(testset):
    testset.set_name('snitch_spatz')
    testset.add_target('snitch_spatz')
    testset.add_testset(callback=spatz_tests_build)


def occamy_tests_build(testset):
    cwd = testset.get_path()
    test = testset.new_test('occamy')
    test.add_command(Shell('run', 'mkdir -p occamy'))
    test.add_command(Shell('run', f'gvsoc --target=occamy --work occamy --binary {cwd}/offload-multi_cluster.elf run'))

def occamy_testset_build(testset):
    testset.set_name('occamy')
    testset.add_target('occamy')
    testset.add_testset(callback=occamy_tests_build)


def snitch_tests_build(testset):
    cwd = testset.get_path()
    test = testset.new_test('snitch')
    test.add_command(Shell('run', 'mkdir -p snitch'))
    test.add_command(Shell('run', f'gvsoc --target=snitch --work snitch --binary {cwd}/fp32_computation_vector.elf run'))

def snitch_testset_build(testset):
    testset.set_name('snitch')
    testset.add_target('snitch')
    testset.add_testset(callback=snitch_tests_build)


def snitch_cluster_single_tests_build(testset):
    cwd = testset.get_path()
    test = testset.new_test('fp32_computation_vector')
    test.add_command(Shell('run', 'mkdir -p pulp.snitch.snitch_cluster_single'))
    test.add_command(Shell('run', f'gvsoc --target=pulp.snitch.snitch_cluster_single --work pulp.snitch.snitch_cluster_single --binary {cwd}/fp32_computation_vector.elf run'))

def snitch_cluster_single_testset_build(testset):
    testset.set_name('snitch_cluster_single')
    testset.add_target('snitch_cluster_single')
    testset.add_testset(callback=snitch_cluster_single_tests_build)


def siracusa_tests_build(testset):
    cwd = testset.get_path()
    test = testset.new_test('siracusa')
    test.add_command(Shell('run', 'mkdir -p siracusa'))
    test.add_command(Shell('run', f'gvsoc --target=siracusa --work siracusa --binary {cwd}/neureka_test run'))

def siracusa_testset_build(testset):
    testset.set_name('siracusa')
    testset.add_target('siracusa')
    testset.add_testset(callback=siracusa_tests_build)



# Called by plptest to declare the tests
def testset_build(testset):

    testset.set_name('examples')

    cwd = testset.get_path()

    #
    # Test list decription
    #
    testset.add_testset(callback=rv64_testset_build)
    testset.add_testset(callback=pulp_open_testset_build)
    testset.add_testset(callback=spatz_testset_build)
    testset.add_testset(callback=snitch_spatz_testset_build)
    testset.add_testset(callback=occamy_testset_build)
    testset.add_testset(callback=snitch_testset_build)
    testset.add_testset(callback=snitch_cluster_single_testset_build)
    testset.add_testset(callback=siracusa_testset_build)


    #test = testset.new_test('pulp_open_ddr')
    #test.add_command(Shell('run', 'mkdir -p pulp-open-ddr'))
    #test.add_command(Shell('run', f'gvsoc --target=pulp-open-ddr --work pulp-open --binary {cwd}/add_dramsyslib_patches/dma_dram_test.bin image flash run'))
