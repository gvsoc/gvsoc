from plptest.testsuite import *

def check_output(test, output):

    expected = \
        'Hello, got 0x0 from my comp\n' \
        'Voltage 600\n' \
        'OFF\n' \
        '@power.measure_0@0.000000@\n' \
        'ON clock-gated\n' \
        '@power.measure_1@0.000050@\n' \
        'ON\n' \
        '@power.measure_2@0.000250@\n' \
        'ON with accesses\n' \
        '@power.measure_3@0.000333@\n' \
        '\n' \
        '\n' \
        'Voltage 800\n' \
        'OFF\n' \
        '@power.measure_4@-0.000000@\n' \
        'ON clock-gated\n' \
        '@power.measure_5@0.000067@\n' \
        'ON\n' \
        '@power.measure_6@0.000367@\n' \
        'ON with accesses\n' \
        '@power.measure_7@0.000478@\n' \
        '\n' \
        '\n' \
        'Voltage 1200\n' \
        'OFF\n' \
        '@power.measure_8@0.000000@\n' \
        'ON clock-gated\n' \
        '@power.measure_9@0.000100@\n' \
        'ON\n' \
        '@power.measure_10@0.000600@\n' \
        'ON with accesses\n' \
        '@power.measure_11@0.000767@\n'

    if output.find(expected) == -1:
        return (False, "Didn't find output string\n")

    return (True, None)

# Called by plptest to declare the tests
def testset_build(testset):

    #
    # Test list decription
    #
    test = testset.new_test('14_how_to_add_power_traces_to_a_component')
    test.add_command(Shell('clean', 'make clean'))
    test.add_command(Shell('gvsoc', 'make prepare gvsoc'))
    test.add_command(Shell('all', 'make all'))
    test.add_command(Shell('run', 'make run runner_args=--vcd'))
    test.add_command(Checker('check', check_output))
